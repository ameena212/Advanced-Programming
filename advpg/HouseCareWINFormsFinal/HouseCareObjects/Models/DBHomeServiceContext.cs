// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;

namespace HouseCareObjects.Models
{
    public partial class DBHomeServiceContext : DbContext
    {
        public DBHomeServiceContext()
        {
        }

        public DBHomeServiceContext(DbContextOptions<DBHomeServiceContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AppCategory> AppCategories { get; set; }
        public virtual DbSet<AppLog> AppLogs { get; set; }
        public virtual DbSet<AppService> AppServices { get; set; }
        public virtual DbSet<AppUser> AppUsers { get; set; }
        public virtual DbSet<Comment> Comments { get; set; }
        public virtual DbSet<Document> Documents { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<NotificationStatus> NotificationStatuses { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<PaymentStatus> PaymentStatuses { get; set; }
        public virtual DbSet<ServiceRequest> ServiceRequests { get; set; }
        public virtual DbSet<ServiceStatus> ServiceStatuses { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AppCategory>(entity =>
            {
                entity.HasKey(e => e.CategoryId);

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.CategoryDescription)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ManagerId).HasColumnName("ManagerId");

                entity.HasOne(d => d.Manager)
                    .WithMany(p => p.AppCategories)
                    .HasForeignKey(d => d.ManagerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AppCategories_AppUsers");
            });

            modelBuilder.Entity<AppLog>(entity =>
            {
                entity.HasKey(e => e.LogId);

                entity.Property(e => e.LogId).HasColumnName("LogID");

                entity.Property(e => e.CurrentValue)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LogDateTime).HasColumnType("datetime");

                entity.Property(e => e.LogMessage)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.LogSource)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.LogType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.OriginalValue)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AppLogs)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AppLogs_AppUsers");
            });

            modelBuilder.Entity<AppService>(entity =>
            {
                entity.HasKey(e => e.ServiceId);

                entity.Property(e => e.ServiceId).HasColumnName("ServiceID");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.ServiceDescription).HasMaxLength(1000);

                entity.Property(e => e.ServiceDuration)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.ServiceName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ServiceType)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.AppServices)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_AppServices_AppCategories");
            });

            modelBuilder.Entity<AppUser>(entity =>
            {
                entity.HasKey(e => e.UserId);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.Property(e => e.Dob)
                    .HasColumnType("date")
                    .HasColumnName("DOB");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Fname)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.Lname)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserRoleId).HasColumnName("UserRoleID");

                entity.HasOne(d => d.UserRole)
                    .WithMany(p => p.AppUsers)
                    .HasForeignKey(d => d.UserRoleId)
                    .HasConstraintName("FK_AppUsers_UserRoles");
            });

            modelBuilder.Entity<Comment>(entity =>
            {
                entity.Property(e => e.CommentId).HasColumnName("CommentID");

                entity.Property(e => e.CommentDateTime).HasColumnType("datetime");

                entity.Property(e => e.CommentText)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.CommentTitle)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.ServiceRequest)
                    .WithMany(p => p.Comments)
                    .HasForeignKey(d => d.ServiceRequestId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Comments_ServiceRequests");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Comments)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Comments_AppUsers");
            });

            modelBuilder.Entity<Document>(entity =>
            {
                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.DocumentDescription).HasMaxLength(200);

                entity.Property(e => e.DocumentName)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DocumentPath)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.DocumentType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

                entity.Property(e => e.UploadDate).HasColumnType("date");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Documents)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Documents_AppUsers");
            });

            modelBuilder.Entity<Notification>(entity =>
            {
                entity.Property(e => e.NotificationId).HasColumnName("NotificationID");

                entity.Property(e => e.NotificationDateTime).HasColumnType("datetime");

                entity.Property(e => e.NotificationMessage)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.NotificationType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.NotificationStatus)
                    .WithMany(p => p.Notifications)
                    .HasForeignKey(d => d.NotificationStatusId)
                    .HasConstraintName("FK_Notifications_NotificationStatuses");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Notifications)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Notifications_AppUsers");
            });

            modelBuilder.Entity<NotificationStatus>(entity =>
            {
                entity.Property(e => e.NotificationStatus1)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnName("NotificationStatus");
            });

            modelBuilder.Entity<Payment>(entity =>
            {
                entity.Property(e => e.PaymentId).HasColumnName("PaymentID");

                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.PayDateTime).HasColumnType("datetime");

                entity.Property(e => e.PayType)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

                entity.HasOne(d => d.PaymentStatus)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.PaymentStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Payments_PaymentStatuses");

                entity.HasOne(d => d.ServiceRequest)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.ServiceRequestId)
                    .HasConstraintName("FK_Payments_ServiceRequests");
            });

            modelBuilder.Entity<PaymentStatus>(entity =>
            {
                entity.Property(e => e.PaymentStatus1).HasColumnName("PaymentStatus");
            });

            modelBuilder.Entity<ServiceRequest>(entity =>
            {
                entity.Property(e => e.ServiceRequestId).HasColumnName("ServiceRequestID");

                entity.Property(e => e.DateNeeded).HasColumnType("datetime");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.DocumentId).HasColumnName("DocumentID");

                entity.Property(e => e.ServiceId).HasColumnName("ServiceID");

                entity.Property(e => e.ServiceStatusId).HasColumnName("ServiceStatusID");

                entity.Property(e => e.UserId).HasColumnName("UserID");

                entity.HasOne(d => d.Document)
                    .WithMany(p => p.ServiceRequests)
                    .HasForeignKey(d => d.DocumentId)
                    .HasConstraintName("FK_ServiceRequests_Documents");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServiceRequests)
                    .HasForeignKey(d => d.ServiceId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceRequests_AppServices");

                entity.HasOne(d => d.ServiceStatus)
                    .WithMany(p => p.ServiceRequests)
                    .HasForeignKey(d => d.ServiceStatusId)
                    .HasConstraintName("FK_ServiceRequests_ServiceStatuses");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.ServiceRequests)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ServiceRequests_AppUsers");
            });

            modelBuilder.Entity<ServiceStatus>(entity =>
            {
                entity.Property(e => e.ServiceStatusId).HasColumnName("ServiceStatusID");

                entity.Property(e => e.ServiceState)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<UserRole>(entity =>
            {
                entity.Property(e => e.UserRoleId).HasColumnName("UserRoleID");

                entity.Property(e => e.UserType)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);


           protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer(@"Server=(localdb)\MSSQLLocalDB;Initial Catalog=DBHomeService;Trusted_Connection=True;");
        }

    }
}